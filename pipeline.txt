MODULE MAIN 
line 46: o_spt.reserved_task(task_id)
    [DML] UPDATE :
        SYSTEM.AA_TASK_DAILY_DETAIL
            status : 'CANCEL'
            conditions: status in ('OPEN') and 
                        time_required < current_time 
                        task_id = 11
    
    [DML] UPDATE:
        SYSTEM.AA_TASK_DAILY_DETAIL
            status : 'OPEN'
            conditions: status in ('RESERVED','ON_PROCESS') and 
                        task_id = 11

    CHECK:
        length : SYSTEM.AA_TASK_DAILY_DETAIL
            conditions: task_id = 11 and 
                        time_required >= current_time and 
                        status = 'OPEN'
        
        0 => s_spt.gen_daily_task(task_id)
            SELECT:
                SYSTEM.AA_TASK_LIST
                conditions: id = 11
            => task_info : dict (cols) 

            CHECK: Note: check xem task đã hết giờ chạy cho 1 ngày hay chưa ?
                current_time(ct) > datetime(ct(year,month,day), task_info['DAILY_ENDTIME_REQUIRED'],0,0) 
                True: review_date(rv_date) = ct(year,month,day) + 1 day 
                False: review_date(rv_date) = ct(year,month,day)

            CHECK:
                length: SYSTEM.AA_TASK_DAILY_DETAIL
                    conditions: task_id = 11 
                                review_date = review_date 
                
                0 => Note: Gen request for review date 
                    left_times(lt) = task_info['FREQUENCY']
                    CHECK: 
                        lf > 1
                            Note: Số lần chạy trong ngày
                            duration = (task_info['DAILY_ENDTIME_REQUIRED'] - task_info['DAILY_STARTTIME_REQUIRED'])/(task_info['FREQUENCY']-1)
                    time_require(tr) = rv_date(year,month,day,task_info['DAILY_STARTTIME_REQUIRED'],0,0)
                    start_time(st) = time_require
                    end_time(et) = rv_date(year,month,day,task_info['DAILY_ENDTIME_REQUIRED'],0,0)

                    LOOP: 
                        conditions: tr >= st & tr <= et & lt > 0
                        new_dail_task : dict 
                            attribute: REVIEW_DATE, TASK_ID, TIME_REQUIRED, STATUS ('OPEN')
                        [DML] INSERT: query.df_to_db(df_new_daily_task) 
                            exclusive_col : ID 
                            SYSTEM.AA_TASK_DAILY_DETAIL

                        lt -= 1
                        CHECK: note: tạo time cho batch kế
                            lt > 0:
                                tr += duration (hours)

        != 0:
            SELECT
                SYSTEM.AA_TASK_DAILY_DETAIL
                conditions: task_id = 11 
                            status = 'OPEN'
                            time_required >= current_time
                            time_required = min 
                                conditions: task_id = 11   
                                            status = 'OPEN'
                                            time_required >= current_time
                            rownum = 1
                
                task_info: dict (cols)
        
    task_content : SELECT 
        SYSTEM.AA_TASK_DAILY_DETAIL.CONTENT
        conditions: id = 11
        
    [DML] UPDATE
        SYSTEM.AA_TASK_DAILY_DETAIL
        status = 'RESERVED'
        conditions: ID = task_info['ID']
    
    task_info['STATUS'] = 'ON_PROCESS'
    task_info['START_TIME'] = now 

    [DML] UPDATE 
        SYSTEM.AA_TASK_DAILY_DETAIL
        status = task_info['STATUS'], start_time = task_info['START_TIME']
        conditions: id = task_info['ID']

    SELECT
        count: SYSTEM.AA_ERROR_LOG
        conditions: status = 'NEW'  
                    mother_task_id = 11

    CHECK: count > 0 => break

----- RUN TASK -----
run E01_1_Genreq.py
    req_info['REQ_TIME'] = now
    CHECK:
        current = 'Saturday'
        True: period_len = 90
        False: period_len = 60

    req_info {}:
        'STATUS' : 'Open'
        'FROM_DATE' : now - period -> str: %Y-%m-%d %H:%M:%S
        'TO_DATE': now -> str: %Y-%m-%d %H:%M:%S

    try:
        [DML] INSERT:
            SYSTEM.E01_COIN_REQ_OVERALL
            exclusive columns : 'REQ_ID'
            req_info -> matched cols
    except: 
        e = sys.exc_info()
        er_info : {}
            'MOTHER_TASK_ID': 11
            'MOTHER_TASK_CONTENT': 'E01_COOPINVOICE'
            'MODULE_ID' : 'E01_1_1'
            'MODULE_CONTENT': 'COOPINV: GEN REQ CL'
            'LOG_TIME' : now
            'ER1..3' = e[0..2]
            'STATUS' = 'NEW'

        [DML] INSERT:
            AA_ERROR_LOG
            exclusive cols: 'LOG_ID'
            er_info -> matched cols
    
    CHECK:
        count: AA_ERROR_LOG 
            conditions: status = 'NEW'
                        mother_task_id = 11
        > 0: break
        = 0: next run 
    


run E01_1_Runreq.py

Remind:
    req_info {}:
        'REQ_ID' : sequence
        'REQ_TIME' : now
        'STATUS' : 'Open'
        'FROM_DATE' : now - period -> str: %Y-%m-%d %H:%M:%S
        'TO_DATE': now -> str: %Y-%m-%d %H:%M:%S


    CHECK: SELECT -> df_req_overall
        SYSTEM.E01_COIN_REQ_OVERALL
        conditions: status = 'Open'
    0: -> ready_to_run = False
    !=0:
        reg_id : df_req_overall['REQ_ID'] -> min
        CHECK: 
            reg_id : NaN 
        True: ready_to_run : False
        False:
            req_info {}
                'REQ_ID': req_id 
                'FROM_DATE' : df_req_overall['FROM_DATE']
                'TO_DATE' : df_req_overall['TO_DATE']
            ready_to_run = True

        CHECK:
            ready_to_run : True
        True:
            req_info {}
                'STATUS' : 'On_process'
                'START_TIME' : now
            
            [DML] UPDATE:
                SYSTEM.E01_COIN_REQ_OVERALL
                ref: reg_info {}
                update cols: 'STATUS','START_TIME'
                conditions: 'REG_ID'

            max_duration = 15
            filter_date_list:
                Lấy các khoảng thời gian từ 'FROM_DATE' đến 'TO_DATE' theo bước nhảy 15 days 
                Nếu bước nhảy không đủ 15 days thì lấy ngày TO_DATE 
            -> [{'Start_date':sd1,'End_date':ed1},{'Start_date':sd2,'End_date':ed2},...]

            filter_conditions {} = filter_date_list
                'Download_Status' : False 

            bot_profile , assign_status = main_spt.assign_bot_center(biicnn, er_info['MODULE_ID'], req_info['REQ_ID'])
                limit_by_compname : SELECT sum(LIMIT_ACCESS)
                    SYSTEM.BOT_LIMIT_BY_COMPUTER
                    conditions: COMPUTER_NAME = env('COMPUTERNAME')
                
                count_all : SELECT count 
                    SYSTEM.BOT_CENTER_MANAGEMENT
                    conditions: computer_name = env('COMPUTERNAME')
                                user_name = env('USERNAME')
                
                count_on_process: SELECT count 
                    SYSTEM.BOT_CENTER_MANAGEMENT
                    conditions: status = 'On_process'
                                computer_name = env
                
                count_available: 
                    conditions: status = 'Available'
                
                CHECK: count_available >0 & count_on_process < limit_by_compname
                    TRUE:
                        df_bot_info: SELECT 
                            SYSTEM.BOT_CENTER_MANAGEMENT
                            conditions: computer_name, user_name
                                        status = 'Available'
                                        rownum = 1
                        bot_profile {} = df_bot_info

                        [DML] UPDATE 
                            SYSTEM.BOT_CENTER_MANAGEMENT
                            status = 'On_process', task = er_info['MODULE_ID'], req_id = req_info['REQ_ID']
                            conditions: id = bot_profile['ID']
                        assign_status = True

                FALSE:
                    assign_status = False
                    bot_profile {}
            
            driver = lg.login_with_cookies(bot_profile['DOWNLOAD_PATH'])
            try:
                driver = lg.check_logout(driver)

            summary_files_info,er_info = s_spt.collect_summaries(driver,temp_dl_path, filter_conditions, req_info,er_info)
                LOOP : mỗi range trong filter_conditions -> Start_date, End_date
                    Nhập thông tin Start_date, End_date vào link 'Vendorcentral....'
                    -> withdraw_time = now, status = True

                    Xóa các file trong thư mục 'DOWNLOAD_PATH'
                    Dùng selenium xử lý các nút, sau đó 'Export to a spreadsheet'
                    Đổi tên file: REQ_(req_id)_CI_Sum_(Start_date)_(End_date).xls
                    Di chuyển file này vào thư mục: fd_cf['collected_path_ori']

                    new_file_info {}
                        'File_name' : REQ_...xls 
                        'Withdraw_time' : now
                        'Folder_path' : fd_cf['collected_path_ori'] 
                        'Status' : True 
                    
                    summary_files_info.append(new_file_info)
                
            Dùng selenium để clearBrowserData

            [DML] UPDATE 
                SYSTEM.BOT_CENTER_MANAGEMENT
                status = 'Available', task = Null, req_id = Null, update_time_vn = now
                conditions: id = bot_profile['ID']
            
            df_sum_new, converted_file_name = s_spt.combine_summary_file(summary_files_info, path_conv, req_info)
                path_conv = fd_cf['collected_path_conv']
                Nối tất cả các file từ bước trên vào thư mục path_conv 
                output : REQ_(req_id)_CI_Sum_Full 
            
            df_sum_new, req_note = s_spt.process_new_sum(df_sum_new)
                min_invoice_date = df_sum_new['INVOICE_DATE'].min() -> str
                df_master : SELECT 
                    SYSTEM.E01_COIN_OVERALL_MASTER
                    conditions: INVOICE_DATE >= min_invoice_date
                df_mer = df_master.append(df_sum_new)
                    cols: INVOICE_ID, INVOICE_DATE, AGREEMENT_ID, AGREEMENT_TITLE, FUNDING_TYPE, ORIGINAL_BALANCE

                list_dup_full, list_update, list_new = spt.check_modify(df_mer, df_new[mer_cols], 'INVOICE_ID')
                df_sum_new['UPDATE_STATUS'] : NaN 
                CHECK: INVOICE_ID in 
                    list_new -> 'UPDATE_STATUS' = "NEW"
                    list_update -> 'UPDATE_STATUS' = "Update"
                    list_dup_full -> 'UPDATE_STATUS' = "Duplicated"
                
                reset Index 
                df_sum_new['LAST_ID'] = df_sum_new LEFT JOIN df_master ON 'INVOICE_ID' -> 'ID'
                status_note : str
                    Total: len(df_sum_new)
                        New: len(list_new)
                        Update: len(list_update)
                        Duplicated: len(list_dup_full)
            
            [DML] DELETE
                SYSTEM.E01_COIN_OVERALL_FULLOG
                conditions: reg_id = reg_info['REQ_ID']
            [DML] INSERT
                SYSTEM.E01_COIN_OVERALL_FULLOG
                conditions: df_sum_new
            
            s_spt.update_fullog_to_master(...)
                df_mt : SELECT 
                    all_tab_columns
                    conditions: table_name = master_table , owner = SYSTEM 
                
                df_fl : SELECT 
                    all_tab_columns
                    conditions: table_name = fullog_table , owner = SYSTEM

                [DML] DELETE 
                    SYSTEM.E01_COIN_OVERALL_MASTER
                    conditions: INVOICE_ID in 
                        SELECT 
                        SYSTEM.E01_COIN_OVERALL_FULLOG
                        conditions: UPDATE_STATUS = 'Update'
                                    REQ_ID = req_info['REQ_ID']
                
                trans_cols : cols df_ms = df_fl not in ignore cols 
                [DML] INSERT
                    SYSTEM.E01_COIN_OVERALL_MASTER (trans_cols)
                    conditions: SELECT 
                        SYSTEM.E01_COIN_OVERALL_FULLOG
                        conditions: reg_id = req_info['REQ_ID']
                                    update_status <> 'Duplicated'

            s_spt.gen_request_detail(int(req_info['REQ_ID']))
                CHECK: count SELECT 
                    SYSTEM.E01_COIN_REQ_DETAIL
                    conditions: STATUS = 'Pending....'
                
                0:      
                    [DML] INSERT 
                        SYSTEM.E01_COIN_REQ_DETAIL
                        REQ_TIME = now, REQ_SOURCE = '[Req_overral_id reg_id]', STATUS = 'Pending - Wating for adding'

                    new_oa_req_id : SELECT REG_ID -> newest 
                        SYSTEM.E01_COIN_REQ_DETAIL
                        conditions: STATUS = 'Pending....'
                !=0:
                    CHECK:
                        newest '[Req_overral_id reg_id]' not in REQ_SOURCE có REQ_ID mới nhất
                    [DML] UPDATE 
                        SYSTEM.E01_COIN_REQ_DETAIL
                        REQ_SOURCE = 'REQ_SOURCE có newest reg_id,[Req_overral...]'
                        conditions: reg_id = newest reg_id 
                
                df_new_req_detail : SELECT 
                    SYSTEM.E01_COIN_OVERALL_FULLOG
                    conditions: reg_id 
                                update_status in ('Update','New')
                add cols:
                    REQ_ID : newest reg_id pending
                    REQ_SOURCE : '[Req_overral_id reg_id]'
                    STATUS_SHORTAGE : 'Open'
                    STATUS_DETAIL : 'Open'
                
                df_booked_list: SELECT invoice_number 
                    SYSTEM.E01_COIN_REQ_DETAIL_LIST
                    conditions: reg_id = newest reg_id pending
                
                df_new_req_detail:
                    drop các INVOICE_ID in INVOICE_NUMBER của df_booked_list
                    Get cols:
                        REG_ID, REQ_SOURCE, INVOICE_ID, STATUS_SHORTAGE, STATUS_DETAIL
                        đổi INVOICE_ID -> INVOICE_NUMBER

                [DML]: INSERT 
                    SYSTEM.E01_COIN_REQ_DETAIL_LIST
                    exclusive cols: ID 
                    df_new_req_detail
                
                req_info {}
                    STATUS: 'Complete'
                    FINISH_TIME: now 
                    COLLECTED_FILE_NAME : ['file_name']
                    CONVERTED_FILE_NAME : converted_file_name
                    REMARKS : status_note

                [DML] UPDATE 
                    SYSTEM.E01_COIN_REQ_OVERALL
                    newest reg_info
                    conditions: REQ_ID

run E01_2_Assignment.py
    df_req_oa_pending : SELECT
        SYSTEM.E01_COIN_REQ_DETAIL
        conditions: status = 'Pending - Wating for adding'
    
    CHECK: length 
        0: new_req_info {}
            'REQ_TIME' : now 
            'REQ_SOURCE' : '[Re-scan]'
            'STATUS' : 'Pending - Wating for adding'

            [DML] : INSERT 
                new_req_info -> SYSTEM.E01_COIN_REQ_DETAIL
            
            df_req, ready_to_run, req_info = s_spt.scan_req_wipurpose('Assignment')
                df_req : SELECT 
                    SYSTEM.E01_COIN_REQ_DETAIL
                    conditions: status <> 'Complete'
                
                on_process_count = count status = 'On_process' và assignment_status = 'Assigned' của df_reg
                current_open = count status = 'Open' của df_reg 
                current_pending = count status = 'Pending...'
                CHECK: current_open == 0 và current_pending > 0
                    TRUE:
                        pending_id = min 'REQ_ID' của df_reg với status = 'Pending...' 
                        Set giá trị Status của hàng này = 'Open'
                open_count = count status = 'Open' và assignment_status != 'Assigned' (Chưa được Assigned)
                req_id = min 'REQ_ID' của df_reg với status = 'Open' và assignment_status != 'Assigned'
                
                CHECK:
                    on_process_count > 0 -> 'Processing another request, please comeback later'
                    open_count = 0 -> 'No Available request to process'
                    req_id = NaN -> 'Please check, error in request ID = Null'
                    TRUE:
                        ready_to_run = False
                    FALSE:
                        ready_to_run = True
                        req_info {}
                            REQ_ID = req_id 
                            REQ_SOURCE = Lấy giá trị REQ_SOURCE của req_id trong df_req
                
                CHECK:
                    ready_to_run
                    TRUE:
                        **s_spt.add_missing_detail_shortage(req_info)
                            df_new_req_detail : Lấy invoice_ID as invoice_number
                                SYSTEM.E01_COIN_OVERALL_MASTER
                                conditions: không nằm trong bảng SYSTEM.E01_COIN_SHORTAGE_MASTER
                        
                            df_new_req_detail {}
                                'REQ_ID' = req_info['REQ_ID']
                                'REQ_SOURCE' = 'Add_missing'
                                'STATUS_SHORTAGE' = 'Open'
                                'STATUS_DETAIL' = 'Open'
                            
                            df_booked_list : Lấy invoice_number 
                                SYSTEM.E01_COIN_REQ_DETAIL_LIST
                                conditions: REQ_ID = req_info 
                            
                            Lọc df_new_req_detail bỏ đi các invoice_number nằm trong df_booked_list 
                            [DML] INSERT : df_new_req_detail
                                SYSTEM.E01_COIN_REQ_DETAIL_LIST
                                exclusives: ID 
                        
                        **s_spt.add_missing_detail_promotion(req_info)
                            df_new_req_detail : Lấy invoice_ID as invoice_number
                                SYSTEM.E01_COIN_OVERALL_MASTER
                                conditions: không nằm trong bảng SYSTEM.E01_NO_RECORD_DETAIL
                                                                SYSTEM.E01_COIN_DETAIL_FILEMAN
                                            type_info ('NORMAL_PROMOTION_FUNDING_AGREEMENT','NORMAL_PROMOTION_FEE_AGREEMENT','COUPON_PROMOTION', 'PROMOTION')
                                
                                Làm tương tự với Shorage, với REQ_SOURCE = 'Add_missing_detail_promotion'
                                [DML] INSERT : df_new_req_detail
                                    SYSTEM.E01_COIN_REQ_DETAIL_LIST
                                    exclusives: ID
                        
                        **s_spt.add_fail_and_other(req_info)
                            df_new_req_detail : Lấy invoice_number 
                                SYSTEM.E01_COIN_REQ_DETAIL_LIST (group by invoice_number -> ID in max(id))
                                conditions: 
                                (    (remarks = (NULL or "No records were found.) and status_detail = 'No_record' )
                                    or  status_detail = 'Fail'
                                )
                                AND nằm trong SYSTEM.B01_COOPINV_VALIDATION có DIFF_OVR_DET <> 0
                                
                                Làm tương tự với Shorage, với REQ_SOURCE = 'Add_last_fail_or_no_record_not_compliance'
                                [DML] INSERT : df_new_req_detail
                                    SYSTEM.E01_COIN_REQ_DETAIL_LIST
                                    exclusives: ID

                        req_info['STATUS'] = 'Open'
                        [DML] UPDATE 
                            SYSTEM.E01_COIN_REQ_DETAIL
                            status = req_info['STATUS']
                            conditions: req_id 

                        df_req_detail_ori: SELECT 
                            SYSTEM.E01_COIN_REQ_DETAIL_LIST
                            conditions: req_id 
                        
                        total_request = length df_req_detail_ori
                        min_request_per_bot = max (total_request,100)
                        df_req_detail_ori['ASSIGNED_BATCH'] = NaN 
                        -> order by ID asc 
                        CHECK: length df_req_detail_ori > 0
                            TRUE:
                                assign_list: lấy min_request_per_bot giá trị đầu tiên của  df_req_detail_ori có 
                                    ASSIGNED_BATCH is null 
                                    và REQ_ID = req_info 
                                SET giá trị ASSIGNED_BATCH của df_req_detail_ori mà có ID nằm assign_list = 1
                                acc_assign = độ dài assign_list
                                assigned_batch_list = [1]

                                min_id : lấy min ID trong df_req_detail_ori mà có 'ASSIGNED_BATCH' = 1
                                max_id : lấy max ID trong df_req_detail_ori mà có 'ASSIGNED_BATCH' = 1

                                [DML] UPDATE: 
                                    SYSTEM.E01_COIN_REQ_DETAIL_LIST
                                    ASSIGNED_BATCH = 1 
                                    conditions: ID between (min_id, max_id)
                                
                                CHECK: len(assign_list) == len(df_req_detail_ori)
                                    TRUE: break 
                                
                                req_info['ASSIGNMENT_STATUS'] = 'Assigned'
                                [DML] UPDATE:
                                    SYSTEM.E01_COIN_REQ_DETAIL 
                                    'ASSIGNMENT_STATUS' = 'Assigned'
                                    conditions: req_id

            spt.E02_collect_deatil()
                df_req, ready_to_run, req_info = s_spt.scan_req_wipurpose('Run_req')
                    df_req: SELECT 
                        SYSTEM.E01_COIN_REQ_DETAIL 
                        conditions: status <> 'Complete'
                    on_process_count: count status = 'On_process' và assignment_status = 'Assigned'
                    open_count = count status = 'Open' và assignment_status = 'Assigned'
                    reg_id = min REG_ID mà có status = 'Open' và assignment_status = 'Assigned'
                        
                    CHECK:
                        on_process_count > 0 -> 'Processing another request, please comeback later'
                        open_count = 0 -> 'No Available request to process'
                        req_id = NaN -> 'Please check, error in request ID = Null'
                        TRUE:
                            ready_to_run = False
                        FALSE:
                            ready_to_run = True
                            req_info {}
                                REQ_ID = req_id 
                                REQ_SOURCE = Lấy giá trị REQ_SOURCE của req_id trong df_req   

                    CHECK:  ready_to_run = True              
                        TRUE:
                            req_info['STATUS'] = 'On_process'
                            req_info['START_TIME'] = now   
                            [DML] UPDATE 
                                SYSTEM.E01_COIN_REQ_DETAIL
                                req_info ['STATUS','START_TIME']

                        bot_profile , assign_status = main_spt.assign_bot_center(biicnn, er_info['MODULE_ID'], req_info['REQ_ID'])
                            computer_name = env['COMPUTERNAME']
                            user_name = env['USERNAME']
                        
                        limit_by_compname : SELECT sum(LIMIT_ACCESS)
                            SYSTEM.BOT_LIMIT_BY_COMPUTER
                            conditions: COMPUTER_NAME
                        
                        count_all : SELECT count 
                            SYSTEM.BOT_CENTER_MANAGEMENT
                            conditions: computer_name, user_name
                        
                        CHECK: limit > 0 và count_all > 0
                            TRUE:
                                count_on_process: SELECT count
                                    SYSTEM.BOT_CENTER_MANAGEMENT
                                    conditions: computer_name, status = 'On_process'
                                
                                count_available : status = 'Available'

                                CHECK:
                                    available >0 và on_process < limit:
                                        df_bot_info : SELECT 
                                            SYSTEM.BOT_CENTER_MANAGEMENT
                                            conditions: computer_name, user_name, status = 'Available'
                                                        rownum = 1
                                        
                                        avai_bot_info {} : df_bot_info
                                            'STATUS' = 'On_process'
                                        
                                        [DML] UPDATE 
                                            SYSTEM.BOT_CENTER_MANAGEMENT 
                                            status = 'On_process', task=er_info['MODULE_ID'], req_id = req_info['REQ_ID']
                                            update_time_vn = now 
                                            conditions: id = avai_bot_info['ID']
                                        
                        bot_code = bot_profile['BOT_CODE']
                        s_spt.bot_take_batch(bot_code, req_info)
                            df : SELECT min(ASSIGNED_BATCH) -> reg_batch_id 
                                SYSTEM.E01_COIN_REQ_DETAIL_LIST
                                conditions: reg_id = reg_info 
                                            assigned_bot is null 
                            
                            [DML] UPDATE 
                                SYSTEM.E01_COIN_REQ_DETAIL_LIST
                                assigned_bot = bot_code 
                                conditions: reg_id , ASSIGNED_BATCH = reg_batch_id
                        
                        LOOP: count_try = 0, status_scc = 0
                            df_req_detail : SELECT 
                                SYSTEM.E01_COIN_REQ_DETAIL_LIST
                                conditions: reg_id 
                            
                            none_collect_status = ['Collected', 'Complete', 'No_record']
                            CHECK: len(df_req_detail) > 0
                                STATUS_SHORTAGE not in none_collect_status
                                OR STATUS_DETAIL not in none_collect_status

                                TRUE:
                                    (RawData)**s_spt.download_shortage_detail_files(driver, df_req_detail, temp_dl_path, req_info['REQ_ID'])
                                        - Tạo 2 folder mới: shortage path, detail path

                                        status_choose = ['Open', 'Open-recollect', 'Fail']
                                        phase_count = 0 
                                        total_not_yet = 1
                                        LOOP: phase_count < 2 và total_not_yet > 0
                                            df_processing : lọc df_req_detail có STATUS_SHORTAGE hoặc STATUS_DETAIL IN ['Open', 'Open-recollect', 'Fail']
                                            total_not_yet = len(df_processing)
                                            phase_count += 1

                                            geturl: 'https://vendorcentral.amazon.com/hz/vendor/members/coop?ref_=vc_xx_subNav'
                                            count = 0
                                            count_full = 0
                                            invoice_list = ''

                                            LOOP: Mỗi row IN df_processing
                                                invoice_ID = row['INVOICE_NUMBER']
                                                shortage_status = row['STATUS_SHORTAGE']
                                                detail_status = row['STATUS_DETAIL']
                                                count += 1
                                                Nếu count <= 5 (batch_no)
                                                    invoice_list += invoice_ID + ' , \n'
                                                count_full += 1

                                                Nếu invoice_list đủ 5 invoice_IDs:
                                                    Nhập invoice_list vào khung search trên trình duyệt
                                                    Bấm Search 

                                                Với mỗi dòng trong bảng:
                                                    invoice_num = dữ liệu Invoice_ID 
                                                    shortage_status = lấy STATUS_SHORTAGE từ df_req_detail mà có INVOICE_NUMBER = invoice_num
                                                    detail_status = lấy STATUS_DETAIL từ df_req_detail mà có INVOICE_NUMBER = invoice_num
                                                    req_id lấy REQ_ID từ df

                                                    *Nếu shortage_status IN ['Open', 'Open-recollect', 'Fail']
                                                        download_shortage_status = 'Fail'
                                                        DOWNLOAD file excel về.
                                                        Đổi tên file .csv sau đó di chuyển đến thư mục shortage_path
                                                        download_shortage_status = 'Collected'
                                                    Ngược lại:
                                                        download_shortage_status = shortage_status
                                                    
                                                    SET STATUS_SHORTAGE của df_req_detail có INVOICE_NUMBER = invoice_num bằng download_shortage_status

                                                    req_dt_info {}
                                                        REQ_ID:  
                                                        STATUS_SHORTAGE : download_shortage_status
                                                        WITHDRAW_TIME : now 
                                                        INVOICE_NUMBER : invoice_num 

                                                    [DML] UPDATE 
                                                        SYSTEM.E01_COIN_REQ_DETAIL_LIST
                                                        STATUS_SHORTAGE, WITHDRAW_TIME
                                                        conditions: reg_id, invoice_number 

                                                    
                                                    *Nếu detail_status IN ['Open', 'Open-recollect', 'Fail']
                                                        no_report_text = ''
                                                        download_detail_status, df_list_file_name, no_report_text = s_spt.download_detail_files(
                                                                            driver, table,invoice_num, temp_dl_path, detail_path, req_id)

                                                            Download từng invoice ở dạng ('Backup report') và di chuyển vào thư mục 'detail_path'
                                                            -> download_detail_status = 'Collected'
                                                            -> df_list_file_name {}
                                                                    [REQ_ID, INVOICE_NUMBER, FILE_NAME, WITHDRAW_TIME]
                                                        
                                                        Nếu download_detail_status = 'Collected':
                                                            [DML] - DELETE 
                                                                SYSTEM.E01_COIN_DETAIL_FILEMAN
                                                                conditions: reg_id, invoice_num
                                                            
                                                            [DML] - INSERT  df_list_file_name
                                                                SYSTEM.E01_COIN_DETAIL_FILEMAN
                                                        
                                                        req_dt_info {}
                                                            REQ_ID = reg_id 
                                                            STATUS_DETAIL = download_detail_status
                                                            WITHDRAW_TIME = now 
                                                            INVOICE_NUMBER = invoice_num
                                                            REMARKS = no_report_text (Nếu report không có)
                                                        
                                                        [DML] - UPDATE 
                                                            SYSTEM.E01_COIN_REQ_DETAIL_LIST
                                                            Updates: 'STATUS_DETAIL', 'WITHDRAW_TIME', 'REMARKS'
                                                            conditions: 'REQ_ID', 'INVOICE_NUMBER'
                                                        
                                                        Nếu download_detail_status = 'No_record'
                                                            avai_norec: SELECT sum(count_no_rec)
                                                                SYSTEM.E01_NO_RECORD_DETAIL
                                                                conditions: invoice_number = invoice_num
                                                            
                                                            new_count_norec = {}
                                                                INVOICE_NUMBER : invoice_num
                                                                LAST_WITHDRAW_TIME : now
                                                                LAST_REQ_ID : reg_id 
                                                            
                                                            Nếu avai_norec = 0 hoặc None: 
                                                                new_count_norec['COUNT_NO_REC'] = 1
                                                                [DML] INSERT : new_count_norec
                                                                    SYSTEM.E01_NO_RECORD_DETAIL
                                                            Hoặc nếu có dữ liệu:
                                                                new_count_norec['COUNT_NO_REC'] = avai_norec + 1
                                                                [DML] UPDATE 
                                                                    SYSTEM.E01_NO_RECORD_DETAIL
                                                                    Updates: COUNT_NO_REC 
                                                                    conditions: INVOICE_NUMBER
                                                            
                                                            Cập nhật giá trị 'STATUS_DETAIL' cho df_req_detail = download_detail_status
                                                    
                                                    Hoặc nếu detail_status NOT IN ['Open', 'Open-recollect', 'Fail']:
                                                        download_detail_status = detail_status
                                                    
                                                    total_not_yet = df_req_detail có 'STATUS_SHORTAGE' hoặc 'STATUS_DETAIL' IN ('Open', 'Open-recollect', 'Fail')

                                                    Download file PDF ở mỗi invoice_number vào thư mục 'pdf_path'

                                clean_chrome_history                        
                                Cập nhật BOT status = 'Available'

                                df_req_detail = Lấy danh sách các req trong bảng E01_COIN_REQ_DETAIL_LIST với REG_ID = reg_id

                                Với mỗi dòng trong df_req_detail:
                                    nếu cột STATUS_SHORTAGE = 'Collected'
                                        Lấy invoice_number 
                                        df_new_shortage, withdraw_time = s_spt.open_shortage_file(req_id, invoice_number)
                                            Với mỗi file invoice_number trong 'shortage_path'/REG_{reg_id}
                                                Lấy dữ liệu bỏ đi header (row 1) -> df_new_shortage
                                                Lấy ra thời gian hoàn thành xử lý file -> withdraw_time
                                                Thêm các cột vào df_new_shortage
                                                    REQ_ID, WITHDRAW_TIME, INVOICE_NUMBER
                                                
                                                s_spt.update_transittb_df_to_fullog(req_id, df_new_shortage, invoice_number, db_if['st_fl']['tb'])
                                                    [DML] DELETE 
                                                        E01_COIN_SHORTAGE_FULLOG
                                                        conditions: REQ_ID, INVOICE_NUMBER
                                                    
                                                    [DML] INSERT : df_new_shortage
                                                        E01_COIN_SHORTAGE_FULLOG
                                                        exclusives: ID 
                                                
                                                s_spt.update_req_detail_list_status(req_id, invoice_number, status_type)
                                                    [DML] UPDATE 
                                                        E01_COIN_REQ_DETAIL_LIST
                                                        Updates: STATUS_SHORTAGE = 'Complete' 
                                                        conditions: REQ_ID, INVOICE_NUMBER
                                                
                                [DML] DELETE 
                                    E01_COIN_SHORTAGE_MASTER
                                    conditions: invoice_number nằm trong E01_COIN_SHORTAGE_FULLOG
                                                mà có reg_id = reg_id 
                                            
                                [DML] INSERT 
                                    E01_COIN_SHORTAGE_MASTER
                                    SELECT * E01_COIN_SHORTAGE_FULLOG 
                                    conditions: reg_id 

                                Với mỗi dòng trong df_req_detail:
                                    nếu cột STATUS_DETAIL = 'Collected'
                                        Lấy invoice_number
                                        df_file_name = s_spt.get_list_file_by_invoicenumber(req_id, invoice_number)
                                            Lấy tất cả các thông tin file trong bảng E01_COIN_DETAIL_FILEMAN
                                            mà có reg_id và invoice_number
                                        
                                        với mỗi dòng trong df_file_name:
                                            # thêm data vào các bảng trong trans_table
                                            # update vào e01_detail_fileman
                                            Lấy các thông tin: file_name, withdraw_time
                                            not_def_check, remark_text, type_match_text = 
                                                    s_spt.process_detail_file(req_id, file_name, invoice_number, withdraw_time)

                                                man_cols_list = ['ID', 'REQ_ID', 'WITHDRAW_TIME', 'INVOICE_NUMBER']
                                                type_info = s_spt.get_list_ori_cols(man_cols_list)
                                                    df : Lấy thông tin từ bảng E01_COIN_TRANSITMAN_TABLES mà có STORAGE_REQUIREMENT = 1
                                                    với mỗi dòng trong df:
                                                        type_code = giá trị của cột TYPE_CODE 
                                                        type_info {}
                                                            type_code.TRANSIT_REQUIREMENT = giá trị cột TRANSIT_REQUIREMENT
                                                                     .NOT_NULL_COL        =             NOT_NULL_COL
                                                                     .TRANS_TABLE         =             TRANS_TABLE
                                                                     .TRANS_DB            = s_spt.get_db_name(row['TRANS_TABLE'])
                                                                     .DEST_TABLE          =             DEST_TABLE
                                                                     .DEST_DB             = s_spt.get_db_name(row['DEST_TABLE'])
                                                        
                                                        df_cols: Lấy table_name, column_name, data_type trong bảng all_tab_columns
                                                            mà có table_name = type_info[type_code]['TRANS_TABLE'] và 
                                                                  owner = type_info[type_code]['TRANS_DB']
                                                        
                                                        list_cols = []
                                                        với mỗi col nằm trong df_cols['COLUMN_NAME']:
                                                            nếu col ko thuộc man_cols_list:
                                                                list_cols.append(col)

                                                        type_info[type_code]['LIST_COLS'] = list_cols

                                                list_data, check_collect = s_spt.open_excel_file(req_id, invoice_number, file_name, withdraw_time)
                                                        list_data = []
                                                        open_excel_sheet(excel_file, sheet_name, ignore_cols)
                                                            df_input = đọc file và xử lý columns ở file excel theo sheet.    
                                                            new_data_cont {}
                                                                file_name : file_name
                                                                sheet_name : sheet_name
                                                                withdraw_time : withdraw_time
                                                                invoice_number : invoice_number
                                                                reg_id : reg_id 
                                                                df : df_input         
                                                        list_data.append(new_data_cont)    
                                                        check_collect = True   

                                            s_spt.update_req_detail_list_status(req_id, invoice_number, status_type) 
                                                [DML] UPDATE 
                                                    E01_COIN_REQ_DETAIL_LIST   
                                                    set : status_type = 'Complete'
                                                    conditions: reg_id, invoice_number

                                            done_list_1 = s_spt.update_dest_fullog(req_id, True)
                                                tranman_table = table E01_COIN_TRANSITMAN_TABLES
                                                tranman_cols = table E01_COIN_TRANSITMAN_COLS
                                                
                                                Với mỗi hàng tranman_table:
                                                    transit_requirement = giá trị cột TRANSIT_REQUIREMENT
                                                    type_code = giá trị cột TYPE_CODE
                                                    Nếu transit_requirement =1 :
                                                        ori_table = giá trị cột TRANS_TABLE
                                                        ori_db = s_spt.get_db_name(ori_table)
                                                        dest_table = giá trị cột DEST_TABLE
                                                        dest_db = s_spt.get_db_name(dest_table)

                                                        tranman_cols_spec = Lấy những dòng có cột TYPE_CODE = type_code
                                                        ori_cols = nối giá trị cột TRANS_COL của tranman_cols_spec
                                                        dest_cols = nối giá trị cột DEST_COL của tranman_cols_spec

                                                        [DML] DELETE    
                                                            dest_db.dest_table
                                                            conditions: reg_id, ref_type = type_code 
                                                        
                                                        [DML] INSERT 
                                                            dest_db.dest_table (ref_type, dest_cols)
                                                            SELECT type_code, ori_cols FROM ori_db.ori_table
                                                            conditions: reg_id 
                                                        
                                                        done_list_1.append([type_code,ori_table,dest_table])

                                            done_list_2 = s_spt.update_dest_master(req_id)
                                                


        